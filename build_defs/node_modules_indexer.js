#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');

function main() {
  const root = process.argv[2];
  if (!root) {
    printUsageAndExit();
  }

  const nodeModules = path.join(root, 'node_modules');

  const packageJson = JSON.parse(fs.readFileSync(path.join(root, 'package.json')));
  // Only create targets for direct dependencies
  const targets =
      Object.keys(readDependencies(packageJson, ['dependencies', 'devDependencies'])).sort();

  const packages = traceNodeModules(nodeModules);
  const packageMap = {};
  for (const pkg of packages) {
    packageMap[pkg] = tracePackage(path.join(nodeModules, pkg));
  }

  const targetDefs = targets.map(target => {
    // Find out the set of dependencies and classify them into targets (deps)
    // and non-targets (srcs)
    return {
      name: target,
      srcs: Object.keys(collectSrcs(target)).sort().map(src => 'node_modules/' + src),
      deps: Object.keys(packageMap[target].deps).sort().filter(dep => targets.indexOf(dep) !== -1),
      typings: packageMap[target].typings,
    };
  });

  let output = `load("//build_defs:nodejs.bzl", "nodejs_module", "nodejs_binary")
load("//build_defs:typescript.bzl", "ts_ext_library")

def node_modules_index(glob):
`;

  for (const def of targetDefs) {
    let fn;
    const args = {
      name: `"${escapeName(def.name)}"`,
      srcs: `[${def.srcs.map(src => `"${src}"`).join(', ')}]`,
    };
    if (!def.typings) {
      fn = 'nodejs_module';
      args.deps = `[${def.deps.map(dep => `":${escapeName(dep)}"`).join(', ')}]`;
    } else {
      fn = 'ts_ext_library';

      const tsDeps = def.deps.filter(dep => !!dep.typings);
      const nodeDeps = def.deps.filter(dep => !dep.typings);
      args.deps = `[${tsDeps.map(dep => `":${escapeName(dep)}"`).join(', ')}]`;
      args.data = `[${nodeDeps.map(dep => `":${escapeName(dep)}"`).join(', ')}]`;

      args.declarations = `glob(["${path.join('node_modules', def.name, '**/*.d.ts')}"])`;
      args.ambient = def.typings.ambient ? 'True' : 'False';
      args.entry_point = `"${path.join('node_modules', def.name, def.typings.path)}"`;
      args.root_dir = `"${path.join('node_modules', def.name)}"`;
    }
    output += `  ${fn}(${Object.keys(args).map(k => `${k}=${args[k]}`).join(', ')})\n`;
  }

  let binaries = [];
  let nodeBinDir = path.join(nodeModules, '.bin');
  try {
    binaries = fs.readdirSync(nodeBinDir);
  } catch (err) {
  }

  for (const name of binaries) {
    let link;
    try {
      link = fs.readlinkSync(path.join(nodeBinDir, name));
    } catch (err) {
    }
    if (link) {
      const executable = path.join(nodeBinDir, link);
      const pkg = path.relative(nodeModules, executable).split(path.sep)[0];
      const executableInPackage = path.relative(path.join(nodeModules, pkg), executable);
      if (targets.indexOf(pkg) !== -1) {
        const args = {
          name: `"${escapeName(name)}_bin"`,
          srcs: `[":${escapeName(pkg)}"]`,
          entry_point: `"${path.join('node_modules', pkg, executableInPackage)}"`
        };
        output += `  nodejs_binary(${Object.keys(args).map(k => `${k}=${args[k]}`).join(', ')})\n`;
      }
    }
  }

  if (process.argv[3]) {
    if (process.argv[4] === '--verify') {
      if (fs.readFileSync(process.argv[3]).toString() !== output) {
        console.error(
          `Error: ${process.argv[3]} is outdated. Please run:\n\n` +
          process.argv.slice(0, 4).join(' '));
        process.exit(1);
      }
    } else {
      fs.writeFileSync(process.argv[3], output);
    }
  } else {
    process.stdout.write(output);
  }

  function collectSrcs(target, visited) {
    const isFirst = !visited;
    visited = visited || {};
    return Object
        .keys(packageMap[target].deps)
        // Don't take targets unless we are on layers after the first layer
        .filter(dep => (!isFirst || targets.indexOf(dep) === -1) && !visited.hasOwnProperty(target))
        .map(dep => collectSrcs(dep, Object.assign({[target]: true}, visited)))
        .reduce((a, b) => Object.assign(a, b), {[target]: true});
  }
}

function printUsageAndExit() {
  console.error(
      `Usage: ${process.argv[0]} ${process.argv[1]} ` +
      `<package root location> [output file] [--verify]`);
  process.exit(1);
}

function traceNodeModules(nodeModules) {
  const packages = [];
  for (const dir of fs.readdirSync(nodeModules)) {
    if (dir[0] === '@') {
      for (const subdir of fs.readdirSync(path.join(nodeModules, dir))) {
        const pkg = dir + '/' + subdir;
        if (fs.statSync(path.join(nodeModules, pkg)).isDirectory()) {
          packages.push(pkg);
        }
      }
    } else {
      if (fs.statSync(path.join(nodeModules, dir)).isDirectory()) {
        packages.push(dir);
      }
    }
  }

  return packages;
}

function tracePackage(packageDir) {
  let packageJson;
  try {
    packageJson = JSON.parse(fs.readFileSync(path.join(packageDir, 'package.json')));
  } catch (err) {
  }

  if (packageJson) {
    const deps = readDependencies(packageJson);

    const internalNodeModules = path.join(packageDir, 'node_modules');
    const internalDeps =
        fs.existsSync(internalNodeModules) ? traceNodeModules(internalNodeModules) : [];

    for (const dep of internalDeps) {
      Object.assign(deps, tracePackage(path.join(internalNodeModules, dep)).deps);
    }
    for (const dep of internalDeps) {
      delete deps[dep];
    }

    let typings = null;
    let typingsPath;

    if (typeof packageJson.typings === 'string') typingsPath = packageJson.typings;
    else if (typeof packageJson.types === 'string') typingsPath = packageJson.types;

    if (typingsPath) {
      if (!typingsPath.match(/\.ts$/)) {
        typingsPath += '.d.ts';
      }

      // Apply the heuristic that anything in @types is ambient
      const looksAmbient = packageDir.indexOf('/@types/') !== -1;

      // Remove the ./ prefix with normalize
      typings = {path: path.normalize(typingsPath), ambient: looksAmbient};
    }

    return {deps: deps, typings: typings};
  } else {
    // Assume no deps if package.json does not exist / is malformed
    return {deps: {}, typings: null};
  }
}

function readDependencies(packageJson, types) {
  types = types || ['dependencies', 'optionalDependencies', 'peerDependencies'];
  return types.map(type => packageJson[type]).reduce((a, b) => Object.assign(a, b), {});
}

function escapeName(name) {
  return name.replace(/@|!/g, '_').replace(/\//g, '_');
}

main();
